!<arch>
0-isupper.o/    0           0     0     644     282       `
#include "main.h"

/**
  * _isupper - Check if a letter is upper
  * @x: The number to be checked
  *
  * Return: 1 for upper letter or 0 for any else
  */
int _isupper(int x)
{
        if (x >= 65 && x <= 90)
        {
                return (1);
        }

        return (0);
}

0-memset.o/     0           0     0     644     359       `
#include "main.h"
/**
 * _memset - function that fills memory with a constant byte
 *@s: first value
 *@b: second value
 *@n: thirth value
 *
 * Return: char with result of memset
 */
char *_memset(char *s, char b, unsigned int n)
{
        unsigned int i;

        for (i = 0; i < n; i++)
        {
                s[i] = b;
        }
        return (s);
}


0-strcat.o/     0           0     0     644     583       `
#include "main.h"
/**
 * _strcat - concatenates 2 strings.
 * @dest: string with concatenation
 * @src: string to be concatenated
 * Return: Always 0.
 */
char *_strcat(char *dest, char *src)
{
        int lengthD, lengthS;

        lengthD = 0;
        lengthS = 0;

        while (*(dest + lengthD) != '\0')
                lengthD++;

        while (*(src + lengthS) != '\0' && lengthD < 97)
        {
                *(dest + lengthD) = *(src + lengthS);
                lengthD++;
                lengthS++;
        }
        *(dest + lengthD) = '\0';
        return (dest);
}


100-atoi.o/     0           0     0     644     741       `
#include "main.h"
/**
 * _atoi - converts a string to an integer.
 * @s: the string to convert
 * Return: the converted string.
 */
int _atoi(char *s)
{
        short boolean;
        int i, minus, result;

        i = minus = result = boolean = 0;
        minus = -1;

        while (s[i] != '\0')
        {
                if (s[i] == '-')
                        minus *= -1;

                if (s[i] >= '0' && s[i] <= '9')
                {
                        result *= 10;
                        result -= (s[i] - '0');
                        boolean = 1;
                }
                else if (boolean == 1)
                        break;
                i++;
        }
        result *= minus;
        return (result);
}


1-isdigit.o/    0           0     0     644     307       `
#include "main.h"

/**
  * _isdigit - Check if a character is a digit
  * @x: The number to be checked
  *
  * Return: 1 for a character that will be a digit or 0 for any else
  */
int _isdigit(int x)
{
        if (x >= 48 && x <= 57)
        {
                return (1);
        }

        return (0);
}


1-memcpy.o/     0           0     0     644     385       `
#include "main.h"
/**
 * _memcpy - function that copies memory area
 *@dest: the address of memory to print
 *@src: second value
 *@n: thirth value
 *
 * Return: char with result of memset
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
        unsigned int i;

        for (i = 0; i < n; i++)
        {
                dest[i] = src[i];
        }
        return (dest);
}


1-strncat.o/    0           0     0     644     479       `
#include "main.h"
/**
 * _strncat - concatenates string with n bytes from another string
 * @dest: destination string
 * @src: source string
 * @n: bytes to be copied
 *
 * Return: destination string concatenated
 */
char *_strncat(char *dest, char *src, int n)
{
        int i = 0, j;

        while (dest[i] != '\0')
                i++;
        for (j = 0; j < n && src[j] != '\0'; j++, i++)
                dest[i] = src[j];
        dest[i] = '\0';
        return (dest);
}


2-strchr.o/     0           0     0     644     431       `
/**
 * _strchr - locates a character in a given string
 * @str: the given string
 * @c: the given string
 *
 * Return: (Success) a pointer to the first occurence of c
 * ------- (Fail) return a null pointer
 */
char *_strchr(char *str, char c)
{
        char *ptr;

        if (str == NULL)
                return (NULL);
        for (ptr = str; *ptr; ptr++)
                if (*ptr == c)
                        return (ptr);
}


2-strlen.o/     0           0     0     644     285       `
#include "main.h"

/**
 * _strlen - returns the length of a string
 * @s: string to evaluate
 *
 * Return: the length of the string
 */
int _strlen(char *s)
{
        int i;

        i = 0;

        while (s[i] != '\0')
        {
                i++;
        }

        return (i);
}


2-strncpy.o/    0           0     0     644     463       `
#include "main.h"
/**
 * _strncpy - concatenate strings, defining the size of second string.
 * @dest: string with concatenation
 * @src: string to be concatenated
 * @n: size of second string
 * Return: Always 0.
 */
char *_strncpy(char *dest, char *src, int n)
{
        int i;

        for (i = 0; i < n && src[i] != '\0'; i++)
                *(dest + i) = *(src + i);
        for ( ; i < n; i++)
                *(dest + i) = '\0';
        return (dest);
}


3-islower.o/    0           0     0     644     353       `
/*
 * File: 3-islower.c
 * Auth: Brennan D Baraban
 */

#include "main.h"

/**
 * _islower - Checks if a character is lowercase.
 * @c: The character to be checked.
 *
 * Return: 1 if character is lowercase, 0 otherwise.
 */
int _islower(int c)
{
        if (c >= 'a' && c <= 'z')
                return (1);
        else
                return (0);
}


3-puts.o/       0           0     0     644     266       `
#include "main.h"

/**
 * _puts - prints a string to stdout
 * @str: pointer to the string to print
 */
void _puts(char *str)
{
        int i;

        for (i = 0; str[i] != '\0'; i++)
        {
                _putchar(str[i]);
        }
        _putchar('\n');
}

3-strcmp.o/     0           0     0     644     437       `
#include "main.h"
/**
 * _strcmp - compare 2 strings.
 * @s1: string to be compared.
 * @s2: string for comparation.
 * Return: Difference.
 */
int _strcmp(char *s1, char *s2)
{
        while ((*s1 != '\0' && *s2 != '\0') && *s1 == *s2)
        {
                s1++;
                s2++;
        }
        if (*s1 == *s2)
        {
                return (0);
        }
        else
        {
        return (*s1 - *s2);
        }
}


4-isalpha.o/    0           0     0     644     415       `
/*
 * File: 4-isalpha.c
 * Auth: Brennan D Baraban
 */

#include "main.h"

/**
 * _isalpha - Checks if a character is alphabetic.
 * @c: The character to be checked.
 *
 * Return: 1 if character is letter, lowercase or uppercase, 0 otherwise.
 */
int _isalpha(int c)
{
        if ((c >= 'a' && c <= 'z') ||
            (c >= 'A' && c <= 'Z'))
                return (1);
        else
                return (0);
}


4-strpbrk.o/    0           0     0     644     551       `
#include "main.h"
/**
 * _strpbrk - function that searches a string for any of a set of bytes..
 *@s: first value -char
 *@accept: second value - char
 *
 * Return: char with result
 */
char *_strpbrk(char *s, char *accept)
{
        int j = 0;

        while (*s)
        {
                while (accept[j] != '\0')
                {
                        if (*s == accept[j])
                                return (s);
                        j++;
                }
                j = 0;
                s++;
        }
        return ('\0');
}


5-strstr.o/     0           0     0     644     1121      `
#include "main.h"
/**
 * _strstr - function that locates a substring.
 *@haystack: first value -char
 *@needle: second value - char
 *
 * Return: char with result
 */
char *_strstr(char *haystack, char *needle)
{
        int count = 0, a = 0, k, j = 0, l, i = 0;
        char *p;

        while (needle[count] != '\0')
        {
                count++;
        }
        while (haystack[i] != '\0')
        {
                i++;
                        }
        if (count == 0)
                return (haystack);
        while (haystack[j] != '\0')
        {
                if (haystack[j] == needle[0])
                {
                        p = &haystack[j];
                        l = j;
                        a = 0;
                        for (k = 0; k < count; k++)
                        {
                                if (haystack[l] == needle[k])
                                        a++;
                                l++;
                        }
                }
                if (a == count)
                        return (p);
                j++;
        }
        return ('\0');
}


6-abs.o/        0           0     0     644     327       `
/*
 * File: 6-abs.c
 * Auth: Brennan D Baraban
 */

#include "main.h"

/**
 * _abs - Computes the absolute value of an integer.
 * @n: The integer to be computed.
 *
 * Return: The absolute value of the integer.
 */
int _abs(int n)
{
        if (n >= 0)
                return (n);
        else
                return (-n);
}


9-strcpy.o/     0           0     0     644     574       `
#include "main.h"

/**
 * *_strcpy - copies the string pointed to by src
 * including the terminating null byte (\0)
 * to the buffer pointed to by dest
 * @dest: pointer to the buffer in which we copy the string
 * @src: string to be copied
 *
 * Return: the pointer to dest
 */
char *_strcpy(char *dest, char *src)
{
        int len, i;

        len = 0;

        while (src[len] != '\0')
        {
                len++;
        }

        for (i = 0; i < len; i++)
        {
                dest[i] = src[i];
        }
        dest[i] = '\0';

        return (dest);
}

_putchar.o/     0           0     0     644     255       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
        return (write(1, &c, 1));
}


